{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionList.js\",\n  _s = $RefreshSig$();\n/* ChatSessionList.js */\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport useAuthStore from '../context/authStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSessionList = () => {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const user = useAuthStore.getState().user;\n  useEffect(() => {\n    //컴포넌트가 처음 마운트될 때 한 번 실행\n    // 백엔드 API 호출: 세션 목록 가져오기\n    const user_id = user.user_id; // 실제 user_id를 여기에 설정\n\n    fetch(`http://localhost:8000/sessions?user_id=${user_id}`).then(res => res.json()) //첫 번째 .then()은 fetch가 반환한 Promise가 이행(fulfilled)될 때 실행됩니다.\n    .then(data => setSessions(data)) //두 번째 .then()은 JSON 파싱이 완료되어 실제 데이터가 준비되었을 때 실행됩니다.\n    .catch(err => console.error(err)); //체인에 있는 어느 단계에서든 에러가 발생하면, 이 .catch()가 실행되어 에러를 콘솔에 출력합니다.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sessions.map(session => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/chat/${session.sessionId}`,\n          children: session.header_message.substring(0, 20)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, session.sessionId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSessionList, \"TH/2S4xpmKAC4lsJs+5/MNwbh30=\");\n_c = ChatSessionList;\nexport default ChatSessionList;\nvar _c;\n$RefreshReg$(_c, \"ChatSessionList\");","map":{"version":3,"names":["React","useEffect","useState","Link","useAuthStore","jsxDEV","_jsxDEV","ChatSessionList","_s","sessions","setSessions","user","getState","user_id","fetch","then","res","json","data","catch","err","console","error","children","map","session","to","sessionId","header_message","substring","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionList.js"],"sourcesContent":["/* ChatSessionList.js */\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport useAuthStore from '../context/authStore';\n\n\nconst ChatSessionList = () => {\n  const [sessions, setSessions] = useState([]);\n\n  const user = useAuthStore.getState().user;\n\n  useEffect(() => { //컴포넌트가 처음 마운트될 때 한 번 실행\n    // 백엔드 API 호출: 세션 목록 가져오기\n    const user_id = user.user_id; // 실제 user_id를 여기에 설정\n\n    fetch(`http://localhost:8000/sessions?user_id=${user_id}`)\n      .then(res => res.json()) //첫 번째 .then()은 fetch가 반환한 Promise가 이행(fulfilled)될 때 실행됩니다.\n      .then(data => setSessions(data)) //두 번째 .then()은 JSON 파싱이 완료되어 실제 데이터가 준비되었을 때 실행됩니다.\n      .catch(err => console.error(err)); //체인에 있는 어느 단계에서든 에러가 발생하면, 이 .catch()가 실행되어 에러를 콘솔에 출력합니다.\n  }, []);\n\n  return (\n    <div>\n      {/* <h2>Chat Sessions</h2> */}\n      <ul>\n        {sessions.map(session => (\n          <li key={session.sessionId}>\n            <Link to={`/chat/${session.sessionId}`}>\n              {session.header_message.substring(0, 20)}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ChatSessionList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,YAAY,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,IAAI,GAAGP,YAAY,CAACQ,QAAQ,CAAC,CAAC,CAACD,IAAI;EAEzCV,SAAS,CAAC,MAAM;IAAE;IAChB;IACA,MAAMY,OAAO,GAAGF,IAAI,CAACE,OAAO,CAAC,CAAC;;IAE9BC,KAAK,CAAC,0CAA0CD,OAAO,EAAE,CAAC,CACvDE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACxBF,IAAI,CAACG,IAAI,IAAIR,WAAW,CAACQ,IAAI,CAAC,CAAC,CAAC;IAAA,CAChCC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEd,OAAA;IAAAiB,QAAA,eAEEjB,OAAA;MAAAiB,QAAA,EACGd,QAAQ,CAACe,GAAG,CAACC,OAAO,iBACnBnB,OAAA;QAAAiB,QAAA,eACEjB,OAAA,CAACH,IAAI;UAACuB,EAAE,EAAE,SAASD,OAAO,CAACE,SAAS,EAAG;UAAAJ,QAAA,EACpCE,OAAO,CAACG,cAAc,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC,GAHAR,OAAO,CAACE,SAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAItB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CA7BID,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AA+BrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}