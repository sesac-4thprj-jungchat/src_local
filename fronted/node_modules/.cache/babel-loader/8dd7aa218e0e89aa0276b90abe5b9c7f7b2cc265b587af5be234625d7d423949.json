{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js\",\n  _s = $RefreshSig$();\n// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSessionDetail = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const message = useSelector(state => state.message);\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`).then(res => res.json()).then(data => {\n      if (data.messages && data.messages.length > 0) {\n        // 타임스탬프와 sender에 따라 메시지를 정렬합니다.\n        console.log(\"메시지 기록 없음\");\n        const sortedMessages = data.messages.sort((a, b) => {\n          return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n        });\n        setChatHistory(sortedMessages);\n      } else {\n        if (message) {\n          // 메시지를 처리하는 로직\n          console.log(\"처리할 메시지:\", message);\n          sendMessage(message);\n        } else {\n          console.log(\"처리할 메시지 없음\");\n        }\n      }\n    }).catch(err => console.error(err));\n  }, [sessionId]);\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async message => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n      const msg_user = {\n        timestamp,\n        sender: 'user',\n        message: message\n      };\n      const msg_bot = {\n        timestamp,\n        sender: 'bot',\n        message: data.response\n      };\n\n      // 클라이언트 상태에 메시지 추가\n      setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_user)\n      });\n\n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_bot)\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n\n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n  const localHandleMicrophoneClick = () => {\n    handleMicrophoneClick(setCurrentMessage);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${'chat-started'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"microphone-button\",\n        onClick: localHandleMicrophoneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSessionDetail, \"a9+Cfc5ddKt7rGIChIw/Mt8zfvQ=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ChatSessionDetail;\nexport default ChatSessionDetail;\nvar _c;\n$RefreshReg$(_c, \"ChatSessionDetail\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","ReactMarkdown","useSelector","handleMicrophoneClick","jsxDEV","_jsxDEV","ChatSessionDetail","_s","sessionId","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","message","state","fetch","then","res","json","data","messages","length","console","log","sortedMessages","sort","a","b","timestamp","localeCompare","sender","sendMessage","catch","err","error","response","method","headers","body","JSON","stringify","Date","toISOString","msg_user","msg_bot","prev","handleSend","trim","localHandleMicrophoneClick","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js"],"sourcesContent":["// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\n\nconst ChatSessionDetail = () => {\n  const { sessionId } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n\n  const message = useSelector(state => state.message);\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.messages && data.messages.length > 0) {\n          // 타임스탬프와 sender에 따라 메시지를 정렬합니다.\n          console.log(\"메시지 기록 없음\");\n          const sortedMessages = data.messages.sort((a, b) => {\n            return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n          });\n\n          setChatHistory(sortedMessages);\n        } \n        else {\n          if (message) {\n            // 메시지를 처리하는 로직\n            console.log(\"처리할 메시지:\", message);\n            sendMessage(message);\n          }\n          else {\n            console.log(\"처리할 메시지 없음\");\n          }\n        } \n      })\n      .catch((err) => console.error(err));\n  }, [sessionId]);\n\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async (message) => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message }),\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n  \n      const msg_user = { timestamp, sender: 'user', message: message };\n      const msg_bot = { timestamp, sender: 'bot', message: data.response };\n  \n      // 클라이언트 상태에 메시지 추가\n      setChatHistory((prev) => [...prev, msg_user, msg_bot]);\n  \n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_user),\n      });\n  \n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_bot),\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  \n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  const localHandleMicrophoneClick = () => {\n    handleMicrophoneClick(setCurrentMessage);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"messages\">\n        {chatHistory.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n                {/*메시지를 gpt 출력형식에 맞게 변환*/}\n                <div className=\"message-container\">\n                    <ReactMarkdown>{msg.message}</ReactMarkdown>\n                </div>\n            </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className={`input-container ${'chat-started'}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n        />\n        <button className=\"send-button\" onClick={handleSend}>전송</button>\n        <button className=\"microphone-button\" onClick={localHandleMicrophoneClick}></button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSessionDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}