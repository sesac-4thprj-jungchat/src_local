{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js\",\n  _s = $RefreshSig$();\n// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\nimport { setMessage } from '../redux/messageSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSessionDetail = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const dispatch = useDispatch();\n  const message = useSelector(state => state.message);\n  const [modelType, setModelType] = useState('openchat'); // 모델 타입 상태 추가\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    console.log(\"useEffect\");\n    fetch(`http://localhost:8000/sessions/${sessionId}`).then(res => res.json()).then(data => {\n      if (data.messages && data.messages.length > 0) {\n        // 타임스탬프와 sender에 따라 메시지를 정렬합니다.\n        console.log(\"메시지 기록 있음\");\n        const sortedMessages = data.messages.sort((a, b) => {\n          return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n        });\n        setChatHistory(sortedMessages);\n      } else {\n        if (message) {\n          // 메시지를 처리하는 로직\n          console.log(\"처리할 메시지:\", message);\n          sendMessage(message);\n          dispatch(setMessage('')); // Redux 메시지 초기화\n        } else {\n          console.log(\"처리할 메시지 없음\");\n        }\n      }\n    }).catch(err => console.error(err));\n  }, [sessionId, message, dispatch]);\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async message => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          session_id: sessionId,\n          model: modelType // 선택된 모델 타입 사용\n        })\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n      const msg_user = {\n        timestamp,\n        sender: 'user',\n        message: message\n      };\n      const msg_bot = {\n        timestamp,\n        sender: 'bot',\n        message: data.response\n      };\n\n      // 클라이언트 상태에 메시지 추가\n      setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_user)\n      });\n\n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_bot)\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n\n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n  const localHandleMicrophoneClick = () => {\n    setIsRecording(prev => !prev);\n    handleMicrophoneClick(setCurrentMessage, setIsRecording);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"model-selector\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '10px 0',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          padding: '8px 15px',\n          borderRadius: '5px',\n          border: 'none',\n          background: modelType === 'openchat' ? '#4BA6F7' : '#f4f4f4',\n          color: modelType === 'openchat' ? 'white' : '#333',\n          cursor: 'pointer',\n          fontWeight: modelType === 'openchat' ? 'bold' : 'normal'\n        },\n        onClick: () => setModelType('openchat'),\n        children: \"OpenChat \\uBAA8\\uB378\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          padding: '8px 15px',\n          borderRadius: '5px',\n          border: 'none',\n          background: modelType === 'rag' ? '#4BA6F7' : '#f4f4f4',\n          color: modelType === 'rag' ? 'white' : '#333',\n          cursor: 'pointer',\n          fontWeight: modelType === 'rag' ? 'bold' : 'normal'\n        },\n        onClick: () => setModelType('rag'),\n        children: \"\\uBCF5\\uC9C0 \\uC815\\uCC45 \\uAC80\\uC0C9 (RAG)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${'chat-started'} ${isRecording ? 'recording' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n            e.preventDefault(); // 기본 동작(예: 폼 제출) 방지\n            if (!e.repeat) {\n              // 키 이벤트가 반복되지 않은 경우에만 처리\n              handleSend();\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `microphone-button ${isRecording ? 'recording' : ''}`,\n        onClick: localHandleMicrophoneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSessionDetail, \"iQBiZZfPneC3EZV7sYf1jnTd6Sc=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n_c = ChatSessionDetail;\nexport default ChatSessionDetail;\nvar _c;\n$RefreshReg$(_c, \"ChatSessionDetail\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","ReactMarkdown","useSelector","useDispatch","handleMicrophoneClick","setMessage","jsxDEV","_jsxDEV","ChatSessionDetail","_s","sessionId","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isRecording","setIsRecording","dispatch","message","state","modelType","setModelType","console","log","fetch","then","res","json","data","messages","length","sortedMessages","sort","a","b","timestamp","localeCompare","sender","sendMessage","catch","err","error","response","method","headers","body","JSON","stringify","session_id","model","Date","toISOString","msg_user","msg_bot","prev","handleSend","trim","localHandleMicrophoneClick","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","style","display","justifyContent","margin","gap","padding","borderRadius","border","background","color","cursor","fontWeight","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","type","placeholder","value","onChange","e","target","onKeyDown","key","nativeEvent","isComposing","preventDefault","repeat","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js"],"sourcesContent":["// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\nimport { setMessage } from '../redux/messageSlice';\n\n\nconst ChatSessionDetail = () => {\n  const { sessionId } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const dispatch = useDispatch();\n  const message = useSelector(state => state.message);\n  const [modelType, setModelType] = useState('openchat'); // 모델 타입 상태 추가\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    console.log(\"useEffect\");\n    fetch(`http://localhost:8000/sessions/${sessionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.messages && data.messages.length > 0) {\n          // 타임스탬프와 sender에 따라 메시지를 정렬합니다.\n          console.log(\"메시지 기록 있음\");\n          const sortedMessages = data.messages.sort((a, b) => {\n            return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n          });\n\n          setChatHistory(sortedMessages);\n        } \n        else {\n          if (message) {\n            // 메시지를 처리하는 로직\n            console.log(\"처리할 메시지:\", message);\n            sendMessage(message);\n            dispatch(setMessage('')); // Redux 메시지 초기화\n          }\n          else {\n            console.log(\"처리할 메시지 없음\");\n          }\n        } \n      })\n      .catch((err) => console.error(err));\n  }, [sessionId, message, dispatch]);\n\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async (message) => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n           message,\n           session_id: sessionId,\n           model: modelType // 선택된 모델 타입 사용\n          }),\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n  \n      const msg_user = { timestamp, sender: 'user', message: message };\n      const msg_bot = { timestamp, sender: 'bot', message: data.response };\n  \n      // 클라이언트 상태에 메시지 추가\n      setChatHistory((prev) => [...prev, msg_user, msg_bot]);\n  \n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_user),\n      });\n  \n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_bot),\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  \n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  const localHandleMicrophoneClick = () => {\n    setIsRecording(prev => !prev);\n    handleMicrophoneClick(setCurrentMessage, setIsRecording);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"model-selector\" style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        margin: '10px 0',\n        gap: '10px'\n      }}>\n        <button \n          style={{ \n            padding: '8px 15px',\n            borderRadius: '5px',\n            border: 'none',\n            background: modelType === 'openchat' ? '#4BA6F7' : '#f4f4f4',\n            color: modelType === 'openchat' ? 'white' : '#333',\n            cursor: 'pointer',\n            fontWeight: modelType === 'openchat' ? 'bold' : 'normal'\n          }}\n          onClick={() => setModelType('openchat')}\n        >\n          OpenChat 모델\n        </button>\n        <button \n          style={{ \n            padding: '8px 15px',\n            borderRadius: '5px',\n            border: 'none',\n            background: modelType === 'rag' ? '#4BA6F7' : '#f4f4f4',\n            color: modelType === 'rag' ? 'white' : '#333',\n            cursor: 'pointer',\n            fontWeight: modelType === 'rag' ? 'bold' : 'normal'\n          }}\n          onClick={() => setModelType('rag')}\n        >\n          복지 정책 검색 (RAG)\n        </button>\n      </div>\n      <div className=\"messages\">\n        {chatHistory.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n                {/*메시지를 gpt 출력형식에 맞게 변환*/}\n                <div className=\"message-container\">\n                    <ReactMarkdown>{msg.message}</ReactMarkdown>\n                </div>\n            </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className={`input-container ${'chat-started'} ${isRecording ? 'recording' : ''}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n              e.preventDefault(); // 기본 동작(예: 폼 제출) 방지\n              if (!e.repeat) {    // 키 이벤트가 반복되지 않은 경우에만 처리\n                handleSend();\n              }\n            }\n          }}\n        />\n        <button className=\"send-button\" onClick={handleSend}>전송</button>\n        <button \n          className={`microphone-button ${isRecording ? 'recording' : ''}`} \n          onClick={localHandleMicrophoneClick}\n        ></button>      \n      </div>\n    </div>\n  );\n};\n\nexport default ChatSessionDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}