{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isChatStarted, setIsChatStarted] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const navigate = useNavigate();\n\n  // 예시 질문 목록 (6개)\n  const exampleQuestions = ['신청 가능한 보조금이 궁금해요', '자격 조건을 알고 싶어요', '절차가 복잡한가요?', '언제부터 지원받을 수 있나요?', '신청 서류는 어떤게 필요한가요?', '펀딧은 어떤 서비스를 제공하나요?'];\n  const createSession = async () => {\n    try {\n      const res = await fetch('http://localhost:8000/sessions', {\n        method: 'POST'\n      });\n      const data = await res.json();\n      setSessionId(data.session_id);\n      return data.session_id;\n    } catch (error) {\n      console.error(\"세션 생성 에러:\", error);\n      throw error;\n    }\n  };\n\n  // API 호출하여 챗봇 응답 받기\n  const sendMessage = async message => {\n    let currentSessionId = sessionId;\n    // 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\n    if (!currentSessionId) {\n      currentSessionId = await createSession();\n    }\n    try {\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n\n      // 현재 시간을 타임스탬프로 기록\n      const timeStamp = new Date().toISOString();\n\n      // 사용자와 챗봇 메시지 객체 생성\n      const msg_user = {\n        id: Date.now(),\n        timeStamp,\n        sender: 'user',\n        text: message\n      };\n      const msg_bot = {\n        id: Date.now() + 1,\n        timeStamp,\n        sender: 'bot',\n        text: data.response\n      };\n\n      // 클라이언트 채팅 기록 업데이트\n      setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n      //백엔드에 저장\n      await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_user)\n      });\n      await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_bot)\n      });\n      navigate(`/chat/${currentSessionId}`);\n    } catch (error) {\n      console.error(\"메시지 전송 중 에러:\", error);\n    }\n  };\n\n  // 메시지 전송 공용 함수\n  const handleSend = text => {\n    if (!text.trim()) return;\n    sendMessage(text);\n    setCurrentMessage('');\n    setIsChatStarted(true);\n  };\n\n  // 인풋창에서 \"전송\" 버튼 클릭\n  const handleSendFromInput = () => {\n    handleSend(currentMessage);\n  };\n\n  // 예시 질문 클릭 -> 메시지 자동 전송\n  const handleExampleQuestionClick = question => {\n    handleSend(question);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), !isChatStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\uBCF4\\uC870\\uAE08 \\uC9C0\\uC6D0,\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 35\n      }, this), \"\\uC774\\uC81C \\uD380\\uB527\\uC5D0\\uAC8C \\uBB3C\\uC5B4\\uBCF4\\uC138\\uC694\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 24\n      }, this), \"\\uAC04\\uB2E8\\uD558\\uACE0 \\uC2E0\\uC18D\\uD558\\uAC8C \\uD574\\uACB0\\uB429\\uB2C8\\uB2E4!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${isChatStarted ? 'chat-started' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendFromInput,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), !isChatStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"example-questions\",\n      children: exampleQuestions.map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example-question-item\",\n        onClick: () => handleExampleQuestionClick(q),\n        children: q\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"IYFEOjYQja4BELsP/e6dAS1NqWs=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","ChatBot","_s","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isChatStarted","setIsChatStarted","sessionId","setSessionId","navigate","exampleQuestions","createSession","res","fetch","method","data","json","session_id","error","console","sendMessage","message","currentSessionId","response","headers","body","JSON","stringify","timeStamp","Date","toISOString","msg_user","id","now","sender","text","msg_bot","prev","handleSend","trim","handleSendFromInput","handleExampleQuestionClick","question","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","value","onChange","e","target","onClick","q","idx","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatBot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ChatBot.css';\n\nconst ChatBot = () => {\n    const [chatHistory, setChatHistory] = useState([]);\n    const [currentMessage, setCurrentMessage] = useState('');\n    const messagesEndRef = useRef(null);\n    const [isChatStarted, setIsChatStarted] = useState(false);\n    const [sessionId, setSessionId] = useState(null);\n    const navigate = useNavigate();\n\n\n    // 예시 질문 목록 (6개)\n    const exampleQuestions = [\n        '신청 가능한 보조금이 궁금해요',\n        '자격 조건을 알고 싶어요',\n        '절차가 복잡한가요?',\n        '언제부터 지원받을 수 있나요?',\n        '신청 서류는 어떤게 필요한가요?',\n        '펀딧은 어떤 서비스를 제공하나요?',\n    ];\n\n    const createSession = async () => {\n        try {\n            const res = await fetch('http://localhost:8000/sessions', { method: 'POST' });\n            const data = await res.json();\n            setSessionId(data.session_id);\n            return data.session_id\n        } catch (error) {\n          console.error(\"세션 생성 에러:\", error);\n          throw error;\n        }\n    };\n\n    // API 호출하여 챗봇 응답 받기\n    const sendMessage = async (message) => {\n        let currentSessionId = sessionId;\n        // 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\n        if (!currentSessionId) {\n            currentSessionId = await createSession();\n        }\n        \n        try {\n            const response = await fetch('http://localhost:8000/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ message }),\n            });\n            const data = await response.json();\n\n            // 현재 시간을 타임스탬프로 기록\n            const timeStamp = new Date().toISOString();\n\n            // 사용자와 챗봇 메시지 객체 생성\n            const msg_user = { id:Date.now(), timeStamp, sender: 'user', text: message };\n            const msg_bot = { id:Date.now()+1, timeStamp, sender: 'bot', text: data.response };\n\n            // 클라이언트 채팅 기록 업데이트\n            setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n            //백엔드에 저장\n            await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(msg_user),\n            });\n\n            await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(msg_bot),\n            });\n\n            navigate(`/chat/${currentSessionId}`);\n\n        } catch (error) {\n            console.error(\"메시지 전송 중 에러:\", error);\n        }\n        };\n\n    // 메시지 전송 공용 함수\n    const handleSend = (text) => {\n    if (!text.trim()) return;\n\n    sendMessage(text);\n    setCurrentMessage('');\n    setIsChatStarted(true);\n    };\n\n    // 인풋창에서 \"전송\" 버튼 클릭\n    const handleSendFromInput = () => {\n        handleSend(currentMessage);\n    };\n\n    // 예시 질문 클릭 -> 메시지 자동 전송\n    const handleExampleQuestionClick = (question) => {\n        handleSend(question);\n      };\n\n    // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n    useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [chatHistory]);\n\n    return (\n    <div className=\"chatbot-container\">\n        {/* 채팅 메시지 영역 */}\n        <div className=\"messages\">\n        {chatHistory.map((message) => (\n            <div key={message.id} className={`message ${message.sender}`}>\n                {message.text}\n            </div>\n        ))}\n            <div ref={messagesEndRef} />\n        </div>\n\n      {/* 아직 채팅이 시작되지 않았다면 안내 문구 표시 */}\n      {!isChatStarted && (\n        <div className=\"intro-text\">\n          <strong>보조금 지원,</strong><br />\n          이제 펀딧에게 물어보세요<br />\n          간단하고 신속하게 해결됩니다!\n        </div>\n      )}\n\n      {/* 입력창 (채팅 시작 후에도 계속 표시됨) */}\n      <div className={`input-container ${isChatStarted ? 'chat-started' : ''}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n        />\n        <button onClick={handleSendFromInput}>전송</button>\n      </div>\n      {!isChatStarted && (\n        <div className=\"example-questions\">\n        {exampleQuestions.map((q, idx) => (\n            <div \n              key={idx} \n              className=\"example-question-item\"\n              onClick={() => handleExampleQuestionClick(q)}\n            >\n                {q}\n          </div>\n        ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}