{"ast":null,"code":"// utils/microphoneHandler.js\nlet mediaRecorder;export const handleMicrophoneClick=(setCurrentMessage,setIsRecording)=>{console.log(\"마이크 버튼이 클릭되었습니다.\");if(mediaRecorder&&mediaRecorder.state===\"recording\"){mediaRecorder.stop();console.log(\"녹음 중단\");setIsRecording(false);return;}if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia({audio:true}).then(stream=>{mediaRecorder=new MediaRecorder(stream);mediaRecorder.start();setIsRecording(true);console.log(\"녹음 시작\");const audioChunks=[];mediaRecorder.ondataavailable=event=>{audioChunks.push(event.data);};mediaRecorder.onstop=()=>{setIsRecording(false);const audioBlob=new Blob(audioChunks,{type:'audio/wav'});// 오디오 데이터를 서버로 전송\nconst formData=new FormData();formData.append('audio',audioBlob,'recording.wav');fetch('http://localhost:8000/upload-audio/',{method:'POST',body:formData}).then(response=>response.json()).then(data=>{console.log(\"오디오 업로드 성공 및 텍스트 변환 결과:\",data.text);// STT 결과를 입력창에 반영\nif(setCurrentMessage&&data.text){setCurrentMessage(data.text);}}).catch(error=>{console.error(\"오디오 업로드 중 에러:\",error);setIsRecording(false);// 에러 발생 시에도 녹음 상태 해제\n});console.log(\"녹음 종료 및 서버로 전송\");};}).catch(error=>{console.error(\"녹음 중 에러:\",error);setIsRecording(false);});}else{console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");setIsRecording(false);}};","map":{"version":3,"names":["mediaRecorder","handleMicrophoneClick","setCurrentMessage","setIsRecording","console","log","state","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","audioChunks","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","formData","FormData","append","fetch","method","body","response","json","text","catch","error"],"sources":["/home/elicer/Fundit_2.1/fronted/src/components/utils/microphoneHandler.js"],"sourcesContent":["// utils/microphoneHandler.js\nlet mediaRecorder;\n\nexport const handleMicrophoneClick = (setCurrentMessage, setIsRecording) => {\n    console.log(\"마이크 버튼이 클릭되었습니다.\");\n\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n        mediaRecorder.stop();\n        console.log(\"녹음 중단\");\n        setIsRecording(false);\n        return;\n    }\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({ audio: true })\n            .then(stream => {\n                mediaRecorder = new MediaRecorder(stream);\n                mediaRecorder.start();\n                setIsRecording(true);\n\n                console.log(\"녹음 시작\");\n\n                const audioChunks = [];\n                mediaRecorder.ondataavailable = event => {\n                    audioChunks.push(event.data);\n                };\n\n                mediaRecorder.onstop = () => {\n                    setIsRecording(false);\n                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n\n                    // 오디오 데이터를 서버로 전송\n                    const formData = new FormData();\n                    formData.append('audio', audioBlob, 'recording.wav');\n\n                    fetch('http://localhost:8000/upload-audio/', {\n                        method: 'POST',\n                        body: formData\n                    })\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(\"오디오 업로드 성공 및 텍스트 변환 결과:\", data.text);\n                        \n                        // STT 결과를 입력창에 반영\n                        if (setCurrentMessage && data.text) {\n                            setCurrentMessage(data.text);\n                        }\n                    })\n                    .catch(error => {\n                        console.error(\"오디오 업로드 중 에러:\", error);\n                        setIsRecording(false); // 에러 발생 시에도 녹음 상태 해제\n                    });\n\n                    console.log(\"녹음 종료 및 서버로 전송\");\n                };\n            })\n            .catch(error => {\n                console.error(\"녹음 중 에러:\", error);\n                setIsRecording(false);\n            });\n    } else {\n        console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");\n        setIsRecording(false);\n    }\n};"],"mappings":"AAAA;AACA,GAAI,CAAAA,aAAa,CAEjB,MAAO,MAAM,CAAAC,qBAAqB,CAAGA,CAACC,iBAAiB,CAAEC,cAAc,GAAK,CACxEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAE/B,GAAIL,aAAa,EAAIA,aAAa,CAACM,KAAK,GAAK,WAAW,CAAE,CACtDN,aAAa,CAACO,IAAI,CAAC,CAAC,CACpBH,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CACpBF,cAAc,CAAC,KAAK,CAAC,CACrB,OACJ,CAEA,GAAIK,SAAS,CAACC,YAAY,EAAID,SAAS,CAACC,YAAY,CAACC,YAAY,CAAE,CAC/DF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC/CC,IAAI,CAACC,MAAM,EAAI,CACZb,aAAa,CAAG,GAAI,CAAAc,aAAa,CAACD,MAAM,CAAC,CACzCb,aAAa,CAACe,KAAK,CAAC,CAAC,CACrBZ,cAAc,CAAC,IAAI,CAAC,CAEpBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CAEpB,KAAM,CAAAW,WAAW,CAAG,EAAE,CACtBhB,aAAa,CAACiB,eAAe,CAAGC,KAAK,EAAI,CACrCF,WAAW,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CAChC,CAAC,CAEDpB,aAAa,CAACqB,MAAM,CAAG,IAAM,CACzBlB,cAAc,CAAC,KAAK,CAAC,CACrB,KAAM,CAAAmB,SAAS,CAAG,GAAI,CAAAC,IAAI,CAACP,WAAW,CAAE,CAAEQ,IAAI,CAAE,WAAY,CAAC,CAAC,CAE9D;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEL,SAAS,CAAE,eAAe,CAAC,CAEpDM,KAAK,CAAC,qCAAqC,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEL,QACV,CAAC,CAAC,CACDb,IAAI,CAACmB,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCpB,IAAI,CAACQ,IAAI,EAAI,CACVhB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEe,IAAI,CAACa,IAAI,CAAC,CAEjD;AACA,GAAI/B,iBAAiB,EAAIkB,IAAI,CAACa,IAAI,CAAE,CAChC/B,iBAAiB,CAACkB,IAAI,CAACa,IAAI,CAAC,CAChC,CACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,EAAI,CACZ/B,OAAO,CAAC+B,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrChC,cAAc,CAAC,KAAK,CAAC,CAAE;AAC3B,CAAC,CAAC,CAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CACjC,CAAC,CACL,CAAC,CAAC,CACD6B,KAAK,CAACC,KAAK,EAAI,CACZ/B,OAAO,CAAC+B,KAAK,CAAC,UAAU,CAAEA,KAAK,CAAC,CAChChC,cAAc,CAAC,KAAK,CAAC,CACzB,CAAC,CAAC,CACV,CAAC,IAAM,CACHC,OAAO,CAAC+B,KAAK,CAAC,0BAA0B,CAAC,CACzChC,cAAc,CAAC,KAAK,CAAC,CACzB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}