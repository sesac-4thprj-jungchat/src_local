{"ast":null,"code":"export const handleMicrophoneClick = () => {\n  console.log(\"마이크 버튼이 클릭되었습니다.\");\n\n  // 브라우저의 MediaRecorder API를 사용하여 녹음 시작\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      console.log(\"녹음 시작\");\n      const audioChunks = [];\n      mediaRecorder.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        audio.play();\n        console.log(\"녹음 종료 및 재생\");\n      };\n\n      // 일정 시간 후 녹음 중지 (예: 5초)\n      setTimeout(() => {\n        mediaRecorder.stop();\n      }, 5000);\n    }).catch(error => {\n      console.error(\"녹음 중 에러:\", error);\n    });\n  } else {\n    console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");\n  }\n};","map":{"version":3,"names":["handleMicrophoneClick","console","log","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","start","audioChunks","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","Audio","play","setTimeout","stop","catch","error"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/utils/microphoneHandler.js"],"sourcesContent":["export const handleMicrophoneClick = () => {\n    console.log(\"마이크 버튼이 클릭되었습니다.\");\n\n    // 브라우저의 MediaRecorder API를 사용하여 녹음 시작\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({ audio: true })\n            .then(stream => {\n                const mediaRecorder = new MediaRecorder(stream);\n                mediaRecorder.start();\n\n                console.log(\"녹음 시작\");\n\n                const audioChunks = [];\n                mediaRecorder.ondataavailable = event => {\n                    audioChunks.push(event.data);\n                };\n\n                mediaRecorder.onstop = () => {\n                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n                    const audioUrl = URL.createObjectURL(audioBlob);\n                    const audio = new Audio(audioUrl);\n                    audio.play();\n\n                    console.log(\"녹음 종료 및 재생\");\n                };\n\n                // 일정 시간 후 녹음 중지 (예: 5초)\n                setTimeout(() => {\n                    mediaRecorder.stop();\n                }, 5000);\n            })\n            .catch(error => {\n                console.error(\"녹음 중 에러:\", error);\n            });\n    } else {\n        console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");\n    }\n};"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAGA,CAAA,KAAM;EACvCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;EAE/B;EACA,IAAIC,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;IAC/DF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAC/CC,IAAI,CAACC,MAAM,IAAI;MACZ,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACF,MAAM,CAAC;MAC/CC,aAAa,CAACE,KAAK,CAAC,CAAC;MAErBV,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MAEpB,MAAMU,WAAW,GAAG,EAAE;MACtBH,aAAa,CAACI,eAAe,GAAGC,KAAK,IAAI;QACrCF,WAAW,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MAChC,CAAC;MAEDP,aAAa,CAACQ,MAAM,GAAG,MAAM;QACzB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACP,WAAW,EAAE;UAAEQ,IAAI,EAAE;QAAY,CAAC,CAAC;QAC9D,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACL,SAAS,CAAC;QAC/C,MAAMZ,KAAK,GAAG,IAAIkB,KAAK,CAACH,QAAQ,CAAC;QACjCf,KAAK,CAACmB,IAAI,CAAC,CAAC;QAEZxB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAC7B,CAAC;;MAED;MACAwB,UAAU,CAAC,MAAM;QACbjB,aAAa,CAACkB,IAAI,CAAC,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZ5B,OAAO,CAAC4B,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;EACV,CAAC,MAAM;IACH5B,OAAO,CAAC4B,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}