{"ast":null,"code":"/* ChatSessionList.js */import React,{useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import{Link}from'react-router-dom';import useAuthStore from'../context/authStore';import{setSessions}from'../redux/sessionSlice';import{jsx as _jsx}from\"react/jsx-runtime\";const ChatSessionList=()=>{const sessions=useSelector(state=>state.sessions);const dispatch=useDispatch();const user=useAuthStore.getState().user;useEffect(()=>{const fetchSessions=async()=>{try{const res=await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);const data=await res.json();dispatch(setSessions(data));// Redux 상태 업데이트\n}catch(error){console.error(\"세션 목록 로딩 에러:\",error);}};fetchSessions();},[dispatch,user.user_id]);return/*#__PURE__*/_jsx(\"div\",{className:\"session-list-container\",children:/*#__PURE__*/_jsx(\"ul\",{className:\"session-list\",children:sessions.map(session=>/*#__PURE__*/_jsx(Link,{to:`/chat/${session.sessionId}`,className:\"session-item\",children:session.header_message.substring(0,16)},session.sessionId))})});};export default ChatSessionList;","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","Link","useAuthStore","setSessions","jsx","_jsx","ChatSessionList","sessions","state","dispatch","user","getState","fetchSessions","res","fetch","user_id","data","json","error","console","className","children","map","session","to","sessionId","header_message","substring"],"sources":["/home/elicer/Fundit_2.1/fronted/src/components/ChatBot/ChatSessionList.js"],"sourcesContent":["/* ChatSessionList.js */\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport useAuthStore from '../context/authStore';\nimport { setSessions } from '../redux/sessionSlice';\n\nconst ChatSessionList = () => {\n  const sessions = useSelector(state => state.sessions);\n  const dispatch = useDispatch();\n  const user = useAuthStore.getState().user;\n\n  useEffect(() => {\n    const fetchSessions = async () => {\n      try {\n        const res = await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);\n        const data = await res.json();\n        dispatch(setSessions(data)); // Redux 상태 업데이트\n      } catch (error) {\n        console.error(\"세션 목록 로딩 에러:\", error);\n      }\n    };\n\n    fetchSessions();\n  }, [dispatch, user.user_id]);\n\n  return (\n    <div className=\"session-list-container\">\n      {/* <h2>Chat Sessions</h2> */}\n      <ul className=\"session-list\">\n        {sessions.map(session => (\n          <Link \n            to={`/chat/${session.sessionId}`} \n            key={session.sessionId} \n            className=\"session-item\"\n          >\n            {session.header_message.substring(0, 16)}\n          </Link>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ChatSessionList;\n"],"mappings":"AAAA,wBACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAO,CAAAC,YAAY,KAAM,sBAAsB,CAC/C,OAASC,WAAW,KAAQ,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,QAAQ,CAAGR,WAAW,CAACS,KAAK,EAAIA,KAAK,CAACD,QAAQ,CAAC,CACrD,KAAM,CAAAE,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAU,IAAI,CAAGR,YAAY,CAACS,QAAQ,CAAC,CAAC,CAACD,IAAI,CAEzCZ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAc,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,CAAC,0CAA0CJ,IAAI,CAACK,OAAO,EAAE,CAAC,CACjF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAC,CAAC,CAC7BR,QAAQ,CAACN,WAAW,CAACa,IAAI,CAAC,CAAC,CAAE;AAC/B,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACtC,CACF,CAAC,CAEDN,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACH,QAAQ,CAAEC,IAAI,CAACK,OAAO,CAAC,CAAC,CAE5B,mBACEV,IAAA,QAAKe,SAAS,CAAC,wBAAwB,CAAAC,QAAA,cAErChB,IAAA,OAAIe,SAAS,CAAC,cAAc,CAAAC,QAAA,CACzBd,QAAQ,CAACe,GAAG,CAACC,OAAO,eACnBlB,IAAA,CAACJ,IAAI,EACHuB,EAAE,CAAE,SAASD,OAAO,CAACE,SAAS,EAAG,CAEjCL,SAAS,CAAC,cAAc,CAAAC,QAAA,CAEvBE,OAAO,CAACG,cAAc,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,EAHnCJ,OAAO,CAACE,SAIT,CACP,CAAC,CACA,CAAC,CACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}