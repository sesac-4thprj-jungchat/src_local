{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatBot.js\",\n  _s = $RefreshSig$();\n// ChatBot.js\n//npm install redux react-redux\n//npm install @reduxjs/toolkit react-redux\n//npm install react-markdown\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { setSessions } from '../redux/sessionSlice';\nimport { setMessage } from '../redux/messageSlice';\nimport './ChatBot.css';\nimport useAuthStore from '../context/authStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isChatStarted, setIsChatStarted] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  // 예시 질문 목록 (6개)\n  const exampleQuestions = ['신청 가능한 보조금이 궁금해요', '자격 조건을 알고 싶어요', '절차가 복잡한가요?', '언제부터 지원받을 수 있나요?', '신청 서류는 어떤게 필요한가요?', '펀딧은 어떤 서비스를 제공하나요?'];\n  const user = useAuthStore.getState().user;\n  const createSession = async message => {\n    try {\n      const res = await fetch('http://localhost:8000/sessions', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: user.user_id,\n          header_message: message\n        })\n      });\n      const data = await res.json();\n      setSessionId(data.session_id);\n\n      // 세션 목록 업데이트\n      const sessionsRes = await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);\n      const sessionsData = await sessionsRes.json();\n      dispatch(setSessions(sessionsData));\n      return data.session_id;\n    } catch (error) {\n      console.error(\"세션 생성 에러:\", error);\n      throw error;\n    }\n  };\n\n  // API 호출하여 챗봇 응답 받기\n  const sendMessage = async message => {\n    let currentSessionId = sessionId;\n    // 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\n    if (!currentSessionId) {\n      currentSessionId = await createSession(message);\n    }\n    navigate(`/chat/${currentSessionId}`);\n\n    // try {\n    //     const response = await fetch('http://localhost:8000/model', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify({ message }),\n    //     });\n    //     const data = await response.json();\n\n    //     // 현재 시간을 타임스탬프로 기록\n    //     const timestamp = new Date().toISOString();\n\n    //     // 사용자와 챗봇 메시지 객체 생성\n    //     //id:Date.now(), timeStamp, id:Date.now()+1, timeStamp,\n    //     const msg_user = { timestamp, sender: 'user', message: message };\n    //     const msg_bot = { timestamp, sender: 'bot', message: data.response };\n\n    //     // 클라이언트 채팅 기록 업데이트\n    //     setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n    //     //백엔드에 저장\n    //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n    //       method: 'POST',\n    //       headers: { 'Content-Type': 'application/json' },\n    //       body: JSON.stringify(msg_user),\n    //     });\n\n    //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n    //       method: 'POST',\n    //       headers: { 'Content-Type': 'application/json' },\n    //       body: JSON.stringify(msg_bot),\n    //     });\n\n    //     navigate(`/chat/${currentSessionId}`);\n\n    // } catch (error) {\n    //     console.error(\"메시지 전송 중 에러:\", error);\n    // }\n  };\n\n  // 메시지 전송 공용 함수\n  const handleSend = text => {\n    if (!text.trim()) return;\n    dispatch(setMessage(text)); // 메시지를 Redux 상태에 저장\n    sendMessage(text);\n    setCurrentMessage('');\n    setIsChatStarted(true);\n  };\n\n  // 인풋창에서 \"전송\" 버튼 클릭\n  const handleSendFromInput = () => {\n    handleSend(currentMessage);\n  };\n\n  // 예시 질문 클릭 -> 메시지 자동 전송\n  const handleExampleQuestionClick = question => {\n    handleSend(question);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), !isChatStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\uBCF4\\uC870\\uAE08 \\uC9C0\\uC6D0,\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 35\n      }, this), \"\\uC774\\uC81C \\uD380\\uB527\\uC5D0\\uAC8C \\uBB3C\\uC5B4\\uBCF4\\uC138\\uC694\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 24\n      }, this), \"\\uAC04\\uB2E8\\uD558\\uACE0 \\uC2E0\\uC18D\\uD558\\uAC8C \\uD574\\uACB0\\uB429\\uB2C8\\uB2E4!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${isChatStarted ? 'chat-started' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"microphone-button\",\n        onClick: handleMicrophoneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendFromInput,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), !isChatStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"example-questions\",\n      children: exampleQuestions.map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example-question-item\",\n        onClick: () => handleExampleQuestionClick(q),\n        children: q\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"z6M4ZqHbkxGTidkFg/37k+Aa9os=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","useDispatch","setSessions","setMessage","useAuthStore","jsxDEV","_jsxDEV","ChatBot","_s","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isChatStarted","setIsChatStarted","sessionId","setSessionId","navigate","dispatch","exampleQuestions","user","getState","createSession","message","res","fetch","method","headers","body","JSON","stringify","user_id","header_message","data","json","session_id","sessionsRes","sessionsData","error","console","sendMessage","currentSessionId","handleSend","text","trim","handleSendFromInput","handleExampleQuestionClick","question","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","index","sender","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","handleMicrophoneClick","type","placeholder","value","onChange","e","target","q","idx","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatBot.js"],"sourcesContent":["// ChatBot.js\n//npm install redux react-redux\n//npm install @reduxjs/toolkit react-redux\n//npm install react-markdown\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { setSessions } from '../redux/sessionSlice';\nimport { setMessage } from '../redux/messageSlice';\nimport './ChatBot.css';\nimport useAuthStore from '../context/authStore';\n\nconst ChatBot = () => {\n    const [chatHistory, setChatHistory] = useState([]);\n    const [currentMessage, setCurrentMessage] = useState('');\n    const messagesEndRef = useRef(null);\n    const [isChatStarted, setIsChatStarted] = useState(false);\n    const [sessionId, setSessionId] = useState(null);\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    // 예시 질문 목록 (6개)\n    const exampleQuestions = [\n        '신청 가능한 보조금이 궁금해요',\n        '자격 조건을 알고 싶어요',\n        '절차가 복잡한가요?',\n        '언제부터 지원받을 수 있나요?',\n        '신청 서류는 어떤게 필요한가요?',\n        '펀딧은 어떤 서비스를 제공하나요?',\n    ];\n\n    const user = useAuthStore.getState().user;\n\n    const createSession = async (message) => {\n        try {\n            const res = await fetch('http://localhost:8000/sessions', {\n              method: 'POST',\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ user_id: user.user_id, header_message: message }),\n            });\n            const data = await res.json();\n            setSessionId(data.session_id);\n\n            // 세션 목록 업데이트\n            const sessionsRes = await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);\n            const sessionsData = await sessionsRes.json();\n            dispatch(setSessions(sessionsData));\n\n            return data.session_id\n        } catch (error) {\n          console.error(\"세션 생성 에러:\", error);\n          throw error;\n        }\n    };\n\n    // API 호출하여 챗봇 응답 받기\n    const sendMessage = async (message) => {\n        let currentSessionId = sessionId;\n        // 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\n        if (!currentSessionId) {\n            currentSessionId = await createSession(message);\n        }\n\n        navigate(`/chat/${currentSessionId}`);\n\n        // try {\n        //     const response = await fetch('http://localhost:8000/model', {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({ message }),\n        //     });\n        //     const data = await response.json();\n\n        //     // 현재 시간을 타임스탬프로 기록\n        //     const timestamp = new Date().toISOString();\n\n        //     // 사용자와 챗봇 메시지 객체 생성\n        //     //id:Date.now(), timeStamp, id:Date.now()+1, timeStamp,\n        //     const msg_user = { timestamp, sender: 'user', message: message };\n        //     const msg_bot = { timestamp, sender: 'bot', message: data.response };\n\n        //     // 클라이언트 채팅 기록 업데이트\n        //     setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n        //     //백엔드에 저장\n        //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        //       method: 'POST',\n        //       headers: { 'Content-Type': 'application/json' },\n        //       body: JSON.stringify(msg_user),\n        //     });\n\n        //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        //       method: 'POST',\n        //       headers: { 'Content-Type': 'application/json' },\n        //       body: JSON.stringify(msg_bot),\n        //     });\n\n        //     navigate(`/chat/${currentSessionId}`);\n\n        // } catch (error) {\n        //     console.error(\"메시지 전송 중 에러:\", error);\n        // }\n        };\n\n    // 메시지 전송 공용 함수\n    const handleSend = (text) => {\n        if (!text.trim()) return;\n\n        dispatch(setMessage(text)); // 메시지를 Redux 상태에 저장\n        sendMessage(text);\n        setCurrentMessage('');\n        setIsChatStarted(true);\n    };\n\n    // 인풋창에서 \"전송\" 버튼 클릭\n    const handleSendFromInput = () => {\n        handleSend(currentMessage);\n    };\n\n    // 예시 질문 클릭 -> 메시지 자동 전송\n    const handleExampleQuestionClick = (question) => {\n        handleSend(question);\n      };\n\n    // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n    useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [chatHistory]);\n\n    return (\n    <div className=\"chatbot-container\">\n        {/* 채팅 메시지 영역 */}\n        <div className=\"messages\">\n        {chatHistory.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n                {message.message}\n            </div>\n        ))}\n            <div ref={messagesEndRef} />\n        </div>\n\n      {/* 아직 채팅이 시작되지 않았다면 안내 문구 표시 */}\n      {!isChatStarted && (\n        <div className=\"intro-text\">\n          <strong>보조금 지원,</strong><br />\n          이제 펀딧에게 물어보세요<br />\n          간단하고 신속하게 해결됩니다!\n        </div>\n      )}\n\n      {/* 입력창 (채팅 시작 후에도 계속 표시됨) */}\n      <div className={`input-container ${isChatStarted ? 'chat-started' : ''}`}>\n\n        <button className=\"microphone-button\" onClick={handleMicrophoneClick}></button>\n        \n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n        />\n        <button onClick={handleSendFromInput}>전송</button>\n      </div>\n      {!isChatStarted && (\n        <div className=\"example-questions\">\n        {exampleQuestions.map((q, idx) => (\n            <div \n              key={idx} \n              className=\"example-question-item\"\n              onClick={() => handleExampleQuestionClick(q)}\n            >\n                {q}\n          </div>\n        ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,OAAO,eAAe;AACtB,OAAOC,YAAY,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMgB,cAAc,GAAGf,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMqB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAMmB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMmB,gBAAgB,GAAG,CACrB,kBAAkB,EAClB,eAAe,EACf,YAAY,EACZ,kBAAkB,EAClB,mBAAmB,EACnB,oBAAoB,CACvB;EAED,MAAMC,IAAI,GAAGjB,YAAY,CAACkB,QAAQ,CAAC,CAAC,CAACD,IAAI;EAEzC,MAAME,aAAa,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEX,IAAI,CAACW,OAAO;UAAEC,cAAc,EAAET;QAAQ,CAAC;MACzE,CAAC,CAAC;MACF,MAAMU,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;MAC7BlB,YAAY,CAACiB,IAAI,CAACE,UAAU,CAAC;;MAE7B;MACA,MAAMC,WAAW,GAAG,MAAMX,KAAK,CAAC,0CAA0CL,IAAI,CAACW,OAAO,EAAE,CAAC;MACzF,MAAMM,YAAY,GAAG,MAAMD,WAAW,CAACF,IAAI,CAAC,CAAC;MAC7ChB,QAAQ,CAACjB,WAAW,CAACoC,YAAY,CAAC,CAAC;MAEnC,OAAOJ,IAAI,CAACE,UAAU;IAC1B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC,MAAMA,KAAK;IACb;EACJ,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,MAAOjB,OAAO,IAAK;IACnC,IAAIkB,gBAAgB,GAAG1B,SAAS;IAChC;IACA,IAAI,CAAC0B,gBAAgB,EAAE;MACnBA,gBAAgB,GAAG,MAAMnB,aAAa,CAACC,OAAO,CAAC;IACnD;IAEAN,QAAQ,CAAC,SAASwB,gBAAgB,EAAE,CAAC;;IAErC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;EACA,CAAC;;EAEL;EACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;IACzB,IAAI,CAACA,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;IAElB1B,QAAQ,CAAChB,UAAU,CAACyC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5BH,WAAW,CAACG,IAAI,CAAC;IACjBhC,iBAAiB,CAAC,EAAE,CAAC;IACrBG,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA,MAAM+B,mBAAmB,GAAGA,CAAA,KAAM;IAC9BH,UAAU,CAAChC,cAAc,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMoC,0BAA0B,GAAIC,QAAQ,IAAK;IAC7CL,UAAU,CAACK,QAAQ,CAAC;EACtB,CAAC;;EAEH;EACAjD,SAAS,CAAC,MAAM;IAAA,IAAAkD,qBAAA;IAChB,CAAAA,qBAAA,GAAApC,cAAc,CAACqC,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAAC3C,WAAW,CAAC,CAAC;EAEjB,oBACAH,OAAA;IAAK+C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAE9BhD,OAAA;MAAK+C,SAAS,EAAC,UAAU;MAAAC,QAAA,GACxB7C,WAAW,CAAC8C,GAAG,CAAC,CAAC/B,OAAO,EAAEgC,KAAK,kBAC5BlD,OAAA;QAAiB+C,SAAS,EAAE,WAAW7B,OAAO,CAACiC,MAAM,EAAG;QAAAH,QAAA,EACnD9B,OAAO,CAACA;MAAO,GADVgC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR,CAAC,eACEvD,OAAA;QAAKwD,GAAG,EAAEjD;MAAe;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EAGP,CAAC/C,aAAa,iBACbR,OAAA;MAAK+C,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBhD,OAAA;QAAAgD,QAAA,EAAQ;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAAAvD,OAAA;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,wEACjB,eAAAvD,OAAA;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,qFAErB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,eAGDvD,OAAA;MAAK+C,SAAS,EAAE,mBAAmBvC,aAAa,GAAG,cAAc,GAAG,EAAE,EAAG;MAAAwC,QAAA,gBAEvEhD,OAAA;QAAQ+C,SAAS,EAAC,mBAAmB;QAACU,OAAO,EAAEC;MAAsB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eAE/EvD,OAAA;QACE2D,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,4DAAe;QAC3BC,KAAK,EAAExD,cAAe;QACtByD,QAAQ,EAAGC,CAAC,IAAKzD,iBAAiB,CAACyD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,eACFvD,OAAA;QAAQyD,OAAO,EAAEjB,mBAAoB;QAAAQ,QAAA,EAAC;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EACL,CAAC/C,aAAa,iBACbR,OAAA;MAAK+C,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EACjClC,gBAAgB,CAACmC,GAAG,CAAC,CAACgB,CAAC,EAAEC,GAAG,kBACzBlE,OAAA;QAEE+C,SAAS,EAAC,uBAAuB;QACjCU,OAAO,EAAEA,CAAA,KAAMhB,0BAA0B,CAACwB,CAAC,CAAE;QAAAjB,QAAA,EAE1CiB;MAAC,GAJCC,GAAG;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrD,EAAA,CAxKID,OAAO;EAAA,QAMQP,WAAW,EACXC,WAAW;AAAA;AAAAwE,EAAA,GAP1BlE,OAAO;AA0Kb,eAAeA,OAAO;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}