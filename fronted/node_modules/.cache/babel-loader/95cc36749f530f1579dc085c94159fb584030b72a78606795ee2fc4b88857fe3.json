{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSessionDetail = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const message = useSelector(state => state.message);\n\n  // 채팅 기록 로드만 담당하는 useEffect\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`).then(res => res.json()).then(data => {\n      if (data.messages && data.messages.length > 0) {\n        const sortedMessages = data.messages.sort((a, b) => {\n          return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n        });\n        setChatHistory(sortedMessages);\n      }\n    }).catch(err => console.error(err));\n  }, [sessionId]);\n\n  // Redux 메시지 상태를 위한 별도의 useEffect\n  useEffect(() => {\n    if (message && message.trim() !== '') {\n      // 리덕스를 통해 메시지가 있을 때만 전송\n      sendMessage(message);\n    }\n  }, [message, sessionId]);\n  const sendMessage = async message => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          session_id: sessionId\n        })\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n      const msg_user = {\n        timestamp,\n        sender: 'user',\n        message: message\n      };\n      const msg_bot = {\n        timestamp,\n        sender: 'bot',\n        message: data.response\n      };\n      setChatHistory(prev => [...prev, msg_user, msg_bot]);\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_user)\n      });\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_bot)\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // 폼 제출 방지\n      handleSend();\n    }\n  };\n  const localHandleMicrophoneClick = () => {\n    setIsRecording(prev => !prev);\n    handleMicrophoneClick(setCurrentMessage, setIsRecording);\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${'chat-started'} ${isRecording ? 'recording' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value),\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `microphone-button ${isRecording ? 'recording' : ''}`,\n        onClick: localHandleMicrophoneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSessionDetail, \"EUgmHQic7kMn63Acj8s+q4sfNHc=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ChatSessionDetail;\nexport default ChatSessionDetail;\nvar _c;\n$RefreshReg$(_c, \"ChatSessionDetail\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","ReactMarkdown","useSelector","handleMicrophoneClick","jsxDEV","_jsxDEV","ChatSessionDetail","_s","sessionId","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isRecording","setIsRecording","message","state","fetch","then","res","json","data","messages","length","sortedMessages","sort","a","b","timestamp","localeCompare","sender","catch","err","console","error","trim","sendMessage","response","method","headers","body","JSON","stringify","session_id","Date","toISOString","msg_user","msg_bot","prev","handleSend","handleKeyDown","e","key","shiftKey","preventDefault","localHandleMicrophoneClick","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","value","onChange","target","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\n\nconst ChatSessionDetail = () => {\n  const { sessionId } = useParams();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n\n  const message = useSelector(state => state.message);\n\n  // 채팅 기록 로드만 담당하는 useEffect\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.messages && data.messages.length > 0) {\n          const sortedMessages = data.messages.sort((a, b) => {\n            return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n          });\n          setChatHistory(sortedMessages);\n        }\n      })\n      .catch((err) => console.error(err));\n  }, [sessionId]);\n\n  // Redux 메시지 상태를 위한 별도의 useEffect\n  useEffect(() => {\n    if (message && message.trim() !== '') {\n      // 리덕스를 통해 메시지가 있을 때만 전송\n      sendMessage(message);\n    }\n  }, [message, sessionId]);\n\n  const sendMessage = async (message) => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n           message,\n           session_id: sessionId \n          }),\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n  \n      const msg_user = { timestamp, sender: 'user', message: message };\n      const msg_bot = { timestamp, sender: 'bot', message: data.response };\n  \n      setChatHistory((prev) => [...prev, msg_user, msg_bot]);\n  \n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_user),\n      });\n  \n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_bot),\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  \n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // 폼 제출 방지\n      handleSend();\n    }\n  };\n\n  const localHandleMicrophoneClick = () => {\n    setIsRecording(prev => !prev);\n    handleMicrophoneClick(setCurrentMessage, setIsRecording);\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"messages\">\n        {chatHistory.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n                <div className=\"message-container\">\n                    <ReactMarkdown>{msg.message}</ReactMarkdown>\n                </div>\n            </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className={`input-container ${'chat-started'} ${isRecording ? 'recording' : ''}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n        <button className=\"send-button\" onClick={handleSend}>전송</button>\n        <button \n          className={`microphone-button ${isRecording ? 'recording' : ''}`} \n          onClick={localHandleMicrophoneClick}\n        ></button>      \n      </div>\n    </div>\n  );\n};\n\nexport default ChatSessionDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}