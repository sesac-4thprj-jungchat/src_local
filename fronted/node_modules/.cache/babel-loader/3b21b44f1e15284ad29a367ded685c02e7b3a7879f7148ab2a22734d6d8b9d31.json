{"ast":null,"code":"var _jsxFileName = \"/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js\",\n  _s = $RefreshSig$();\n// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSessionDetail = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`).then(res => res.json()).then(data => {\n      if (data.message) {\n        setChatHistory(data.message);\n      } else {\n        console.error(\"Invalid response format\");\n      }\n    }).catch(err => console.error(err));\n  }, [sessionId]);\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async message => {\n    try {\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n      const msg_user = {\n        timestamp,\n        sender: 'user',\n        message: message\n      };\n      const msg_bot = {\n        timestamp,\n        sender: 'bot',\n        message: data.response\n      };\n\n      // 클라이언트 상태에 메시지 추가\n      setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_user)\n      });\n\n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(msg_bot)\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n\n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [msg.message, \" \"]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-container ${'chat-started'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSessionDetail, \"kfMPSVHyCTlcQcVuMZDq4V3/co4=\", false, function () {\n  return [useParams];\n});\n_c = ChatSessionDetail;\nexport default ChatSessionDetail;\nvar _c;\n$RefreshReg$(_c, \"ChatSessionDetail\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","jsxDEV","_jsxDEV","ChatSessionDetail","_s","sessionId","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","fetch","then","res","json","data","message","console","error","catch","err","sendMessage","response","method","headers","body","JSON","stringify","timestamp","Date","toISOString","msg_user","sender","msg_bot","prev","handleSend","trim","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","msg","index","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/ChatBot/ChatSessionDetail.js"],"sourcesContent":["// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './ChatBot.css';\n\nconst ChatSessionDetail = () => {\n  const { sessionId } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    fetch(`http://localhost:8000/sessions/${sessionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) {\n          setChatHistory(data.message);\n        } else {\n          console.error(\"Invalid response format\");\n        }\n      })\n      .catch((err) => console.error(err));\n  }, [sessionId]);\n  \n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async (message) => {\n    try {\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message }),\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n  \n      const msg_user = { timestamp, sender: 'user', message: message };\n      const msg_bot = { timestamp, sender: 'bot', message: data.response };\n  \n      // 클라이언트 상태에 메시지 추가\n      setChatHistory((prev) => [...prev, msg_user, msg_bot]);\n  \n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_user),\n      });\n  \n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_bot),\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  \n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"messages\">\n        {chatHistory.map((msg, index) => (\n            <div key={msg.id} className={`message ${msg.sender}`}>\n                {msg.message} {/*<em>{msg.timeStamp}</em>*/}\n            </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className={`input-container ${'chat-started'}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n        />\n        <button onClick={handleSend}>전송</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSessionDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}