{"ast":null,"code":"// ChatSessionDetail.js\nimport React,{useState,useEffect,useRef}from'react';import{useParams}from'react-router-dom';import ReactMarkdown from'react-markdown';import{useSelector,useDispatch}from'react-redux';import'./ChatBot.css';import{handleMicrophoneClick}from'../utils/microphoneHandler';import{setMessage}from'../redux/messageSlice';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatSessionDetail=()=>{const{sessionId}=useParams();// URL에서 sessionId를 추출합니다.\nconst[chatHistory,setChatHistory]=useState([]);const[currentMessage,setCurrentMessage]=useState('');const messagesEndRef=useRef(null);const[isRecording,setIsRecording]=useState(false);const dispatch=useDispatch();const message=useSelector(state=>state.message);//const [modelType, setModelType] = useState('openchat'); // 모델 타입 상태 추가\n// 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\nuseEffect(()=>{console.log(\"useEffect\");fetch(`http://localhost:8000/sessions/${sessionId}`).then(res=>res.json()).then(data=>{if(data.messages&&data.messages.length>0){// 타임스탬프와 sender에 따라 메시지를 정렬합니다.\nconsole.log(\"메시지 기록 있음\");const sortedMessages=data.messages.sort((a,b)=>{return a.timestamp.localeCompare(b.timestamp)||(a.sender==='user'?-1:1);});setChatHistory(sortedMessages);}else{if(message){// 메시지를 처리하는 로직\nconsole.log(\"처리할 메시지:\",message);sendMessage(message);dispatch(setMessage(''));// Redux 메시지 초기화\n}else{console.log(\"처리할 메시지 없음\");}}}).catch(err=>console.error(err));},[sessionId,message,dispatch]);// 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n// 사용자와 챗봇 메시지를 백엔드에 저장합니다.\nconst sendMessage=async message=>{try{const response=await fetch('http://localhost:8000/model',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,session_id:sessionId//model: modelType // 선택된 모델 타입 사용\n})});const data=await response.json();const timestamp=new Date().toISOString();const msg_user={timestamp,sender:'user',message:message};const msg_bot={timestamp,sender:'bot',message:data.response};// 클라이언트 상태에 메시지 추가\nsetChatHistory(prev=>[...prev,msg_user,msg_bot]);// 백엔드에 사용자 메시지 저장\nawait fetch(`http://localhost:8000/sessions/${sessionId}/message`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg_user)});// 백엔드에 챗봇 응답 저장\nawait fetch(`http://localhost:8000/sessions/${sessionId}/message`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(msg_bot)});}catch(error){console.error(\"메시지 전송 에러:\",error);}};// 전송 버튼 클릭 시 처리\nconst handleSend=()=>{if(!currentMessage.trim())return;sendMessage(currentMessage);setCurrentMessage('');};const localHandleMicrophoneClick=()=>{setIsRecording(prev=>!prev);handleMicrophoneClick(setCurrentMessage,setIsRecording);};// 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[chatHistory]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"model-selector\",style:{display:'flex',justifyContent:'center',margin:'10px 0',gap:'10px'}}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",children:[chatHistory.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:`message ${msg.sender}`,children:/*#__PURE__*/_jsx(\"div\",{className:\"message-container\",children:/*#__PURE__*/_jsx(ReactMarkdown,{children:msg.message})})},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"div\",{className:`input-container ${'chat-started'} ${isRecording?'recording':''}`,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",value:currentMessage,onChange:e=>setCurrentMessage(e.target.value),onKeyDown:e=>{if(e.key==='Enter'&&!e.nativeEvent.isComposing){e.preventDefault();// 기본 동작(예: 폼 제출) 방지\nif(!e.repeat){// 키 이벤트가 반복되지 않은 경우에만 처리\nhandleSend();}}}}),/*#__PURE__*/_jsx(\"button\",{className:\"send-button\",onClick:handleSend,children:\"\\uC804\\uC1A1\"}),/*#__PURE__*/_jsx(\"button\",{className:`microphone-button ${isRecording?'recording':''}`,onClick:localHandleMicrophoneClick})]})]});};export default ChatSessionDetail;","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","ReactMarkdown","useSelector","useDispatch","handleMicrophoneClick","setMessage","jsx","_jsx","jsxs","_jsxs","ChatSessionDetail","sessionId","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isRecording","setIsRecording","dispatch","message","state","console","log","fetch","then","res","json","data","messages","length","sortedMessages","sort","a","b","timestamp","localeCompare","sender","sendMessage","catch","err","error","response","method","headers","body","JSON","stringify","session_id","Date","toISOString","msg_user","msg_bot","prev","handleSend","trim","localHandleMicrophoneClick","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","style","display","justifyContent","margin","gap","map","msg","index","ref","type","placeholder","value","onChange","e","target","onKeyDown","key","nativeEvent","isComposing","preventDefault","repeat","onClick"],"sources":["/home/elicer/Fundit_2.1/fronted/src/components/ChatBot/ChatSessionDetail.js"],"sourcesContent":["// ChatSessionDetail.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ChatBot.css';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\nimport { setMessage } from '../redux/messageSlice';\n\n\nconst ChatSessionDetail = () => {\n  const { sessionId } = useParams(); // URL에서 sessionId를 추출합니다.\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const dispatch = useDispatch();\n  const message = useSelector(state => state.message);\n  //const [modelType, setModelType] = useState('openchat'); // 모델 타입 상태 추가\n\n  // 백엔드에서 해당 세션의 채팅 기록을 불러옵니다.\n  useEffect(() => {\n    console.log(\"useEffect\");\n    fetch(`http://localhost:8000/sessions/${sessionId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.messages && data.messages.length > 0) {\n          // 타임스탬프와 sender에 따라 메시지를 정렬합니다.\n          console.log(\"메시지 기록 있음\");\n          const sortedMessages = data.messages.sort((a, b) => {\n            return a.timestamp.localeCompare(b.timestamp) || (a.sender === 'user' ? -1 : 1);\n          });\n\n          setChatHistory(sortedMessages);\n        } \n        else {\n          if (message) {\n            // 메시지를 처리하는 로직\n            console.log(\"처리할 메시지:\", message);\n            sendMessage(message);\n            dispatch(setMessage('')); // Redux 메시지 초기화\n          }\n          else {\n            console.log(\"처리할 메시지 없음\");\n          }\n        } \n      })\n      .catch((err) => console.error(err));\n  }, [sessionId, message, dispatch]);\n\n\n  // 메시지 전송 함수: 백엔드의 /chat 엔드포인트를 호출해 챗봇 응답을 받고,\n  // 사용자와 챗봇 메시지를 백엔드에 저장합니다.\n  const sendMessage = async (message) => {\n    try {\n      const response = await fetch('http://localhost:8000/model', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n           message,\n           session_id: sessionId,\n           //model: modelType // 선택된 모델 타입 사용\n          }),\n      });\n      const data = await response.json();\n      const timestamp = new Date().toISOString();\n  \n      const msg_user = { timestamp, sender: 'user', message: message };\n      const msg_bot = { timestamp, sender: 'bot', message: data.response };\n  \n      // 클라이언트 상태에 메시지 추가\n      setChatHistory((prev) => [...prev, msg_user, msg_bot]);\n  \n      // 백엔드에 사용자 메시지 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_user),\n      });\n  \n      // 백엔드에 챗봇 응답 저장\n      await fetch(`http://localhost:8000/sessions/${sessionId}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(msg_bot),\n      });\n    } catch (error) {\n      console.error(\"메시지 전송 에러:\", error);\n    }\n  };\n  \n  // 전송 버튼 클릭 시 처리\n  const handleSend = () => {\n    if (!currentMessage.trim()) return;\n    sendMessage(currentMessage);\n    setCurrentMessage('');\n  };\n\n  const localHandleMicrophoneClick = () => {\n    setIsRecording(prev => !prev);\n    handleMicrophoneClick(setCurrentMessage, setIsRecording);\n  };\n\n  // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"model-selector\" style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        margin: '10px 0',\n        gap: '10px'\n      }}>\n      </div>\n      <div className=\"messages\">\n        {chatHistory.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n                {/*메시지를 gpt 출력형식에 맞게 변환*/}\n                <div className=\"message-container\">\n                    <ReactMarkdown>{msg.message}</ReactMarkdown>\n                </div>\n            </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className={`input-container ${'chat-started'} ${isRecording ? 'recording' : ''}`}>\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n              e.preventDefault(); // 기본 동작(예: 폼 제출) 방지\n              if (!e.repeat) {    // 키 이벤트가 반복되지 않은 경우에만 처리\n                handleSend();\n              }\n            }\n          }}\n        />\n        <button className=\"send-button\" onClick={handleSend}>전송</button>\n        <button \n          className={`microphone-button ${isRecording ? 'recording' : ''}`} \n          onClick={localHandleMicrophoneClick}\n        ></button>      \n      </div>\n    </div>\n  );\n};\n\nexport default ChatSessionDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}