{"ast":null,"code":"let mediaRecorder;\nexport const handleMicrophoneClick = setCurrentMessage => {\n  console.log(\"마이크 버튼이 클릭되었습니다.\");\n  if (mediaRecorder && mediaRecorder.state === \"recording\") {\n    mediaRecorder.stop();\n    console.log(\"녹음 중단\");\n    return;\n  }\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      console.log(\"녹음 시작\");\n      const audioChunks = [];\n      mediaRecorder.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/wav'\n        });\n\n        // 오디오 데이터를 서버로 전송\n        const formData = new FormData();\n        formData.append('audio', audioBlob, 'recording.wav');\n        fetch('http://localhost:8000/upload-audio/', {\n          method: 'POST',\n          body: formData\n        }).then(response => response.json()).then(data => {\n          console.log(\"오디오 업로드 성공 및 텍스트 변환 결과:\", data.text);\n          // STT 결과를 입력창에 반영\n          if (setCurrentMessage && data.text) {\n            setCurrentMessage(data.text);\n          }\n        }).catch(error => {\n          console.error(\"오디오 업로드 중 에러:\", error);\n        });\n        console.log(\"녹음 종료 및 서버로 전송\");\n      };\n    }).catch(error => {\n      console.error(\"녹음 중 에러:\", error);\n    });\n  } else {\n    console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");\n  }\n};","map":{"version":3,"names":["mediaRecorder","handleMicrophoneClick","setCurrentMessage","console","log","state","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","audioChunks","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","formData","FormData","append","fetch","method","body","response","json","text","catch","error"],"sources":["/Users/jejinan/Desktop/sesac_final/front/fronted/src/components/utils/microphoneHandler.js"],"sourcesContent":["let mediaRecorder;\n\nexport const handleMicrophoneClick = (setCurrentMessage) => {\n    console.log(\"마이크 버튼이 클릭되었습니다.\");\n\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n        mediaRecorder.stop();\n        console.log(\"녹음 중단\");\n        return;\n    }\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({ audio: true })\n            .then(stream => {\n                mediaRecorder = new MediaRecorder(stream);\n                mediaRecorder.start();\n\n                console.log(\"녹음 시작\");\n\n                const audioChunks = [];\n                mediaRecorder.ondataavailable = event => {\n                    audioChunks.push(event.data);\n                };\n\n                mediaRecorder.onstop = () => {\n                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n\n                    // 오디오 데이터를 서버로 전송\n                    const formData = new FormData();\n                    formData.append('audio', audioBlob, 'recording.wav');\n\n                    fetch('http://localhost:8000/upload-audio/', {\n                        method: 'POST',\n                        body: formData\n                    })\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(\"오디오 업로드 성공 및 텍스트 변환 결과:\", data.text);\n                         // STT 결과를 입력창에 반영\n                         if (setCurrentMessage && data.text) {\n                            setCurrentMessage(data.text);\n                        }\n                    })\n                    .catch(error => {\n                        console.error(\"오디오 업로드 중 에러:\", error);\n                    });\n\n                    console.log(\"녹음 종료 및 서버로 전송\");\n                };\n            })\n            .catch(error => {\n                console.error(\"녹음 중 에러:\", error);\n            });\n    } else {\n        console.error(\"브라우저가 오디오 녹음을 지원하지 않습니다.\");\n    }\n};"],"mappings":"AAAA,IAAIA,aAAa;AAEjB,OAAO,MAAMC,qBAAqB,GAAIC,iBAAiB,IAAK;EACxDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAE/B,IAAIJ,aAAa,IAAIA,aAAa,CAACK,KAAK,KAAK,WAAW,EAAE;IACtDL,aAAa,CAACM,IAAI,CAAC,CAAC;IACpBH,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB;EACJ;EAEA,IAAIG,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;IAC/DF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAC/CC,IAAI,CAACC,MAAM,IAAI;MACZZ,aAAa,GAAG,IAAIa,aAAa,CAACD,MAAM,CAAC;MACzCZ,aAAa,CAACc,KAAK,CAAC,CAAC;MAErBX,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MAEpB,MAAMW,WAAW,GAAG,EAAE;MACtBf,aAAa,CAACgB,eAAe,GAAGC,KAAK,IAAI;QACrCF,WAAW,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MAChC,CAAC;MAEDnB,aAAa,CAACoB,MAAM,GAAG,MAAM;QACzB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACP,WAAW,EAAE;UAAEQ,IAAI,EAAE;QAAY,CAAC,CAAC;;QAE9D;QACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,SAAS,EAAE,eAAe,CAAC;QAEpDM,KAAK,CAAC,qCAAqC,EAAE;UACzCC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEL;QACV,CAAC,CAAC,CACDb,IAAI,CAACmB,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCpB,IAAI,CAACQ,IAAI,IAAI;UACVhB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEe,IAAI,CAACa,IAAI,CAAC;UAChD;UACA,IAAI9B,iBAAiB,IAAIiB,IAAI,CAACa,IAAI,EAAE;YACjC9B,iBAAiB,CAACiB,IAAI,CAACa,IAAI,CAAC;UAChC;QACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZ/B,OAAO,CAAC+B,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACzC,CAAC,CAAC;QAEF/B,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MACjC,CAAC;IACL,CAAC,CAAC,CACD6B,KAAK,CAACC,KAAK,IAAI;MACZ/B,OAAO,CAAC+B,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;EACV,CAAC,MAAM;IACH/B,OAAO,CAAC+B,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}