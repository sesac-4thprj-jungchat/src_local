{"ast":null,"code":"// ChatBot.js\n//npm install redux react-redux\n//npm install @reduxjs/toolkit react-redux\n//npm install react-markdown\nimport React,{useState,useRef,useEffect}from'react';import{useNavigate}from'react-router-dom';import{useDispatch}from'react-redux';import{setSessions}from'../redux/sessionSlice';import{setMessage}from'../redux/messageSlice';import'./ChatBot.css';import useAuthStore from'../context/authStore';import{handleMicrophoneClick}from'../utils/microphoneHandler';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatBot=()=>{const[chatHistory,setChatHistory]=useState([]);const[currentMessage,setCurrentMessage]=useState('');const messagesEndRef=useRef(null);const[isChatStarted,setIsChatStarted]=useState(false);const[sessionId,setSessionId]=useState(null);const[isRecording,setIsRecording]=useState(false);// 녹음 상태 추적\nconst navigate=useNavigate();const dispatch=useDispatch();// 예시 질문 목록 (6개)\nconst exampleQuestions=['신청 가능한 보조금이 궁금해요','자격 조건을 알고 싶어요','절차가 복잡한가요?','언제부터 지원받을 수 있나요?','신청 서류는 어떤게 필요한가요?','펀딧은 어떤 서비스를 제공하나요?'];const user=useAuthStore.getState().user;const createSession=async message=>{try{const res=await fetch('http://localhost:8000/sessions',{method:'POST',headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({user_id:user.user_id,header_message:message})});const data=await res.json();setSessionId(data.session_id);// 세션 목록 업데이트\nconst sessionsRes=await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);const sessionsData=await sessionsRes.json();dispatch(setSessions(sessionsData));return data.session_id;}catch(error){console.error(\"세션 생성 에러:\",error);throw error;}};// API 호출하여 챗봇 응답 받기\nconst sendMessage=async message=>{let currentSessionId=sessionId;// 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\nif(!currentSessionId){currentSessionId=await createSession(message);}navigate(`/chat/${currentSessionId}`);// try {\n//     const response = await fetch('http://localhost:8000/model', {\n//     method: 'POST',\n//     headers: {\n//         'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({ \n//          message,\n//          model: \"openchat\" // OpenChat 모델 사용\n//     }),\n//     });\n//     const data = await response.json();\n//     // 현재 시간을 타임스탬프로 기록\n//     const timestamp = new Date().toISOString();\n//     // 사용자와 챗봇 메시지 객체 생성\n//     //id:Date.now(), timeStamp, id:Date.now()+1, timeStamp,\n//     const msg_user = { timestamp, sender: 'user', message: message };\n//     const msg_bot = { timestamp, sender: 'bot', message: data.response };\n//     // 클라이언트 채팅 기록 업데이트\n//     setChatHistory(prev => [...prev, msg_user, msg_bot]);\n//     //백엔드에 저장\n//     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(msg_user),\n//     });\n//     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(msg_bot),\n//     });\n//     navigate(`/chat/${currentSessionId}`);\n// } catch (error) {\n//     console.error(\"메시지 전송 중 에러:\", error);\n// }\n};// 메시지 전송 공용 함수\nconst handleSend=text=>{if(!text.trim())return;dispatch(setMessage(text));// 메시지를 Redux 상태에 저장\nsendMessage(text);setCurrentMessage('');setIsChatStarted(true);};// 인풋창에서 \"전송\" 버튼 클릭\nconst handleSendFromInput=()=>{handleSend(currentMessage);};// 예시 질문 클릭 -> 메시지 자동 전송\nconst handleExampleQuestionClick=question=>{handleSend(question);};const localHandleMicrophoneClick=()=>{handleMicrophoneClick(setCurrentMessage,setIsRecording);};// 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[chatHistory]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",children:[chatHistory.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:`message ${message.sender}`,children:message.message},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),!isChatStarted&&/*#__PURE__*/_jsxs(\"div\",{className:\"intro-text\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uBCF4\\uC870\\uAE08 \\uC9C0\\uC6D0,\"}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC774\\uC81C \\uD380\\uB527\\uC5D0\\uAC8C \\uBB3C\\uC5B4\\uBCF4\\uC138\\uC694\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uAC04\\uB2E8\\uD558\\uACE0 \\uC2E0\\uC18D\\uD558\\uAC8C \\uD574\\uACB0\\uB429\\uB2C8\\uB2E4!\"]}),/*#__PURE__*/_jsxs(\"div\",{className:`input-container ${isChatStarted?'chat-started':''}`,children:[/*#__PURE__*/_jsx(\"button\",{className:`microphone-button ${isRecording?'recording':''}`,onClick:localHandleMicrophoneClick}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",value:currentMessage,onChange:e=>setCurrentMessage(e.target.value),onKeyDown:e=>{if(e.key==='Enter'&&!e.nativeEvent.isComposing){e.preventDefault();// 기본 동작(예: 폼 제출) 방지\nif(!e.repeat){// 키 이벤트가 반복되지 않은 경우에만 처리\nhandleSendFromInput();}}}}),/*#__PURE__*/_jsx(\"button\",{className:\"send-button\",onClick:handleSendFromInput,children:\"\\uC804\\uC1A1\"})]}),!isChatStarted&&/*#__PURE__*/_jsx(\"div\",{className:\"example-questions\",children:exampleQuestions.map((q,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"example-question-item\",onClick:()=>handleExampleQuestionClick(q),children:q},idx))})]});};export default ChatBot;","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","useDispatch","setSessions","setMessage","useAuthStore","handleMicrophoneClick","jsx","_jsx","jsxs","_jsxs","ChatBot","chatHistory","setChatHistory","currentMessage","setCurrentMessage","messagesEndRef","isChatStarted","setIsChatStarted","sessionId","setSessionId","isRecording","setIsRecording","navigate","dispatch","exampleQuestions","user","getState","createSession","message","res","fetch","method","headers","body","JSON","stringify","user_id","header_message","data","json","session_id","sessionsRes","sessionsData","error","console","sendMessage","currentSessionId","handleSend","text","trim","handleSendFromInput","handleExampleQuestionClick","question","localHandleMicrophoneClick","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","index","sender","ref","onClick","type","placeholder","value","onChange","e","target","onKeyDown","key","nativeEvent","isComposing","preventDefault","repeat","q","idx"],"sources":["/home/elicer/Fundit_2.1/fronted/src/components/ChatBot/ChatBot.js"],"sourcesContent":["// ChatBot.js\n//npm install redux react-redux\n//npm install @reduxjs/toolkit react-redux\n//npm install react-markdown\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { setSessions } from '../redux/sessionSlice';\nimport { setMessage } from '../redux/messageSlice';\nimport './ChatBot.css';\nimport useAuthStore from '../context/authStore';\nimport { handleMicrophoneClick } from '../utils/microphoneHandler';\n\nconst ChatBot = () => {\n    const [chatHistory, setChatHistory] = useState([]);\n    const [currentMessage, setCurrentMessage] = useState('');\n    const messagesEndRef = useRef(null);\n    const [isChatStarted, setIsChatStarted] = useState(false);\n    const [sessionId, setSessionId] = useState(null);\n    const [isRecording, setIsRecording] = useState(false); // 녹음 상태 추적\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    // 예시 질문 목록 (6개)\n    const exampleQuestions = [\n        '신청 가능한 보조금이 궁금해요',\n        '자격 조건을 알고 싶어요',\n        '절차가 복잡한가요?',\n        '언제부터 지원받을 수 있나요?',\n        '신청 서류는 어떤게 필요한가요?',\n        '펀딧은 어떤 서비스를 제공하나요?',\n    ];\n\n    const user = useAuthStore.getState().user;\n\n    const createSession = async (message) => {\n        try {\n            const res = await fetch('http://localhost:8000/sessions', {\n              method: 'POST',\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ user_id: user.user_id, header_message: message }),\n            });\n            const data = await res.json();\n            setSessionId(data.session_id);\n\n            // 세션 목록 업데이트\n            const sessionsRes = await fetch(`http://localhost:8000/sessions?user_id=${user.user_id}`);\n            const sessionsData = await sessionsRes.json();\n            dispatch(setSessions(sessionsData));\n\n            return data.session_id\n        } catch (error) {\n          console.error(\"세션 생성 에러:\", error);\n          throw error;\n        }\n    };\n\n    // API 호출하여 챗봇 응답 받기\n    const sendMessage = async (message) => {\n        let currentSessionId = sessionId;\n        // 세션이 없으면 새로 생성한 후, 그 세션 ID를 사용합니다.\n        if (!currentSessionId) {\n            currentSessionId = await createSession(message);\n        }\n\n        navigate(`/chat/${currentSessionId}`);\n\n        // try {\n        //     const response = await fetch('http://localhost:8000/model', {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({ \n        //          message,\n        //          model: \"openchat\" // OpenChat 모델 사용\n        //     }),\n        //     });\n        //     const data = await response.json();\n\n        //     // 현재 시간을 타임스탬프로 기록\n        //     const timestamp = new Date().toISOString();\n\n        //     // 사용자와 챗봇 메시지 객체 생성\n        //     //id:Date.now(), timeStamp, id:Date.now()+1, timeStamp,\n        //     const msg_user = { timestamp, sender: 'user', message: message };\n        //     const msg_bot = { timestamp, sender: 'bot', message: data.response };\n\n        //     // 클라이언트 채팅 기록 업데이트\n        //     setChatHistory(prev => [...prev, msg_user, msg_bot]);\n\n        //     //백엔드에 저장\n        //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        //       method: 'POST',\n        //       headers: { 'Content-Type': 'application/json' },\n        //       body: JSON.stringify(msg_user),\n        //     });\n\n        //     await fetch(`http://localhost:8000/sessions/${currentSessionId}/message`, {\n        //       method: 'POST',\n        //       headers: { 'Content-Type': 'application/json' },\n        //       body: JSON.stringify(msg_bot),\n        //     });\n\n        //     navigate(`/chat/${currentSessionId}`);\n\n        // } catch (error) {\n        //     console.error(\"메시지 전송 중 에러:\", error);\n        // }\n        };\n\n    // 메시지 전송 공용 함수\n    const handleSend = (text) => {\n        if (!text.trim()) return;\n\n        dispatch(setMessage(text)); // 메시지를 Redux 상태에 저장\n        sendMessage(text);\n        setCurrentMessage('');\n        setIsChatStarted(true);\n    };\n\n    // 인풋창에서 \"전송\" 버튼 클릭\n    const handleSendFromInput = () => {\n        handleSend(currentMessage);\n    };\n\n    // 예시 질문 클릭 -> 메시지 자동 전송\n    const handleExampleQuestionClick = (question) => {\n        handleSend(question);\n\n      };\n\n    const localHandleMicrophoneClick = () => {\n      handleMicrophoneClick(setCurrentMessage, setIsRecording);\n    };\n\n    // 새로운 메시지가 추가되면 스크롤을 자동으로 맨 아래로 이동\n    useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [chatHistory]);\n\n    return (\n    <div className=\"chatbot-container\">\n        {/* 채팅 메시지 영역 */}\n        <div className=\"messages\">\n        {chatHistory.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n                {message.message}\n            </div>\n        ))}\n            <div ref={messagesEndRef} />\n        </div>\n\n      {/* 아직 채팅이 시작되지 않았다면 안내 문구 표시 */}\n      {!isChatStarted && (\n        <div className=\"intro-text\">\n          <strong>보조금 지원,</strong><br />\n          이제 펀딧에게 물어보세요<br />\n          간단하고 신속하게 해결됩니다!\n        </div>\n      )}\n\n      {/* 입력창 (채팅 시작 후에도 계속 표시됨) */}\n      <div className={`input-container ${isChatStarted ? 'chat-started' : ''}`}>\n\n        <button \n          className={`microphone-button ${isRecording ? 'recording' : ''}`} \n          onClick={localHandleMicrophoneClick}\n        ></button>\n\n        <input\n          type=\"text\"\n          placeholder=\"메시지를 입력하세요...\"\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n              e.preventDefault(); // 기본 동작(예: 폼 제출) 방지\n              if (!e.repeat) {    // 키 이벤트가 반복되지 않은 경우에만 처리\n                handleSendFromInput();\n              }\n            }\n          }}\n        />\n        <button className=\"send-button\" onClick={handleSendFromInput}>전송</button>\n      </div>\n      {!isChatStarted && (\n        <div className=\"example-questions\">\n        {exampleQuestions.map((q, idx) => (\n            <div \n              key={idx} \n              className=\"example-question-item\"\n              onClick={() => handleExampleQuestionClick(q)}\n            >\n                {q}\n          </div>\n        ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}